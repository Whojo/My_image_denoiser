#include <Eigen/Dense>
#include <algorithm>
#include <complex>
#include <gtest/gtest.h>
#include <gtest/gtest_pred_impl.h>

#include "fft.hh"

using MatrixXd =
    Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor>;

using MatrixXcd =
    Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor>;

const double rel_precision = 1e-6;
const double abs_precision = 1e-6;

bool almost_equal(const std::complex<double> &lhs,
                  const std::complex<double> &rhs)
{
    return std::abs(lhs - rhs)
        < rel_precision * std::min(std::abs(lhs), std::abs(rhs))
        + abs_precision;
}

TEST(FFTTest, Test1)
{
    double coeffs[] = { 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2,
                        2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4 };

    std::complex<double> coeffs_fft[25];

    fft2(coeffs, coeffs_fft, 5, 5);

    std::complex<double> expected[25] = {
        std::complex<double>(50.0, 0.0),
        std::complex<double>(0.0, 0.0),
        std::complex<double>(0.0, 0.0),
        std::complex<double>(0.0, 0.0),
        std::complex<double>(0.0, 0.0),
        std::complex<double>(-12.5, 17.20477401),
        std::complex<double>(0.0, 0.0),
        std::complex<double>(0.0, 0.0),
        std::complex<double>(0.0, 0.0),
        std::complex<double>(0.0, 0.0),
        std::complex<double>(-12.5, 4.0614962),
        std::complex<double>(0.0, 0.0),
        std::complex<double>(0.0, 0.0),
        std::complex<double>(0.0, 0.0),
        std::complex<double>(0.0, 0.0),
        std::complex<double>(-12.5, -4.0614962),
        std::complex<double>(0.0, 0.0),
        std::complex<double>(0.0, 0.0),
        std::complex<double>(0.0, 0.0),
        std::complex<double>(0.0, 0.0),
        std::complex<double>(-12.5, -17.20477401),
        std::complex<double>(0.0, 0.0),
        std::complex<double>(0.0, 0.0),
        std::complex<double>(0.0, 0.0),
        std::complex<double>(0.0, 0.0)
    };

    for (size_t i = 0; i < 25; i++)
        EXPECT_PRED2(almost_equal, coeffs_fft[i], expected[i]);
}

TEST(FFTTest, Test2)
{
    using namespace std::complex_literals;

    double coeffs[] = { 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5,
                        6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3,
                        4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7 };

    std::complex<double> coeffs_fft[40];

    fft2(coeffs, coeffs_fft, 5, 8);

    std::complex<double> expected[40] = { 140. + 0.i,  -20. + 48.28427125i,
                                          -20. + 20.i, -20. + 8.28427125i,
                                          -20. + 0.i,  -20. - 8.28427125i,
                                          -20. - 20.i, -20. - 48.28427125i,
                                          0. + 0.i,    0. + 0.i,
                                          0. + 0.i,    0. + 0.i,
                                          0. + 0.i,    0. + 0.i,
                                          0. + 0.i,    0. + 0.i,
                                          0. + 0.i,    0. + 0.i,
                                          0. + 0.i,    0. + 0.i,
                                          0. + 0.i,    0. + 0.i,
                                          0. + 0.i,    0. + 0.i,
                                          0. + 0.i,    0. + 0.i,
                                          0. + 0.i,    0. + 0.i,
                                          0. + 0.i,    0. + 0.i,
                                          0. + 0.i,    0. + 0.i,
                                          0. + 0.i,    0. + 0.i,
                                          0. + 0.i,    0. + 0.i,
                                          0. + 0.i,    0. + 0.i,
                                          0. + 0.i,    0. + 0.i };

    for (size_t i = 0; i < 40; i++)
        EXPECT_PRED2(almost_equal, coeffs_fft[i], expected[i]);
}

TEST(FFTTest, Test3)
{
    using namespace std::complex_literals;

    double coeffs[] = {
        185, 20,  225, 85,  119, 114, 37,  141, 168, 216, 213, 229, 182, 131,
        80,  2,   185, 82,  153, 241, 169, 79,  250, 80,  254, 154, 132, 74,
        210, 174, 246, 98,  246, 2,   208, 147, 64,  160, 135, 47,  122, 233,
        128, 198, 66,  17,  139, 83,  59,  118, 184, 208, 231, 106, 101, 178,
        241, 192, 13,  155, 18,  194, 172, 57,  207, 237, 86,  31,  57,  215,
        56,  3,   19,  127, 88,  241, 8,   61,  183, 9,   202, 81,  158, 222,
        171, 87,  73,  45,  184, 158, 179, 76,  84,  111, 246, 240, 63,  108,
        135, 193, 156, 75,  212, 49,  35,  181, 110, 161, 213, 52,  140, 181,
        253, 7,   126, 196, 192, 236, 96,  209, 210, 114, 67,  126, 205, 113,
        158, 204, 115, 222, 177, 82,  21,  232, 65,  175, 131, 138, 116, 133,
        197, 193, 251, 155, 68,  119, 11,  228, 187, 73,  58,  223, 165, 232,
        27,  39,  168, 235, 186, 153, 29,  24,  165, 62,  218, 78,  64,  102,
        6,   219, 151, 51,  205, 78,  168, 63,  216, 69,  174, 206, 178, 223,
        134, 147, 194, 19,  192, 79,  208, 99,  174, 219, 47,  100, 46,  193,
        180, 96,  43,  71,  228, 156, 231, 53,  153, 84,  2,   116, 3,   203,
        67,  128, 167, 191, 78,  21,  97,  193, 193, 35,  110, 62,  27,  252,
        252, 91,  141, 29,  100, 178, 62,  188, 35,  179, 211, 243, 179, 183,
        115, 46,  93,  143, 118, 110, 20,  173, 212, 73,  17,  78,  15,  38,
        210, 11,  18,  190, 242, 209, 104, 117, 91,  158, 12,  151, 32,  202,
        211, 234, 20,  214, 185, 72,  217, 136, 74,  253, 156, 46,  135, 122,
        186, 207, 48,  133, 99,  110, 179, 181, 241, 79,  151, 140, 98,  234,
        156, 254, 219, 75,  45,  17,
    };

    std::complex<double> coeffs_fft[300];

    fft2(coeffs, coeffs_fft, 15, 20);

    std::complex<double> expected[300] = {
        39882. + 0.i,
        155.4040876 + 917.06600722i,
        194.93961348 - 356.22627091i,
        -1300.82185925 - 1119.16502884i,
        704.39356882 - 653.66837567i,
        1055. - 213.i,
        -305.93961348 + 820.8077387i,
        -111.73186293 - 930.32218211i,
        469.60643118 + 740.7902231i,
        782.14963458 + 526.44678183i,
        312. + 0.i,
        782.14963458 - 526.44678183i,
        469.60643118 - 740.7902231i,
        -111.73186293 + 930.32218211i,
        -305.93961348 - 820.8077387i,
        1055. + 213.i,
        704.39356882 + 653.66837567i,
        -1300.82185925 + 1119.16502884i,
        194.93961348 + 356.22627091i,
        155.4040876 - 917.06600722i,
        261.11189102 - 726.14630311i,
        -1272.72978234 - 214.7926706i,
        -411.24453146 - 911.13865763i,
        -240.33301813 - 274.44911895i,
        1787.36857019 - 378.97568199i,
        -20.01350084 + 517.25022364i,
        -972.28944468 + 1033.95588672i,
        1221.47374477 - 348.80076633i,
        1170.0899494 - 804.51542065i,
        -426.15136869 + 195.46475804i,
        426.40893414 - 484.23328159i,
        -1287.55954342 + 1032.21377246i,
        -378.33638126 - 488.78653793i,
        -368.13225237 + 567.78739701i,
        -36.94924812 + 340.33409977i,
        -476.26854518 + 359.46377983i,
        -13.94774744 + 228.90537236i,
        568.46188065 + 268.48047211i,
        -292.21914505 - 475.10791143i,
        -707.5102438 + 9.60648092i,
        1176.63733835 + 814.225381i,
        -1090.83954659 - 743.93733065i,
        227.43188356 - 527.62046773i,
        -30.18278232 + 1656.63781286i,
        -335.02523201 - 269.86187691i,
        -92.24494077 + 558.29862958i,
        -164.86725876 + 208.22427328i,
        -1434.2110638 + 847.76862048i,
        255.59641691 + 1251.11017711i,
        978.94103302 - 752.34402307i,
        1249.16760944 - 1323.0142941i,
        -251.90035859 - 56.52055868i,
        -670.52794177 + 733.43935201i,
        -1024.13125508 - 1220.44611858i,
        1299.38689611 + 36.20421311i,
        1181.58362156 - 87.82458481i,
        -1250.69132214 + 428.04896363i,
        486.26144416 + 1032.85740277i,
        3037.38928126 - 947.80031723i,
        -754.69918212 - 8.90948928i,
        1064.54115968 - 566.9256958i,
        -224.81697692 - 392.88143542i,
        1212.34145293 + 20.67257772i,
        728.92770568 + 567.631721i,
        -547.83606137 + 1444.17236687i,
        169.911998 - 62.35925601i,
        544.18714425 - 1322.19333797i,
        871.65255562 + 674.67391071i,
        1068.89828073 + 273.51893558i,
        774.96993475 + 444.79982225i,
        1479.21492176 + 112.48854356i,
        618.21356482 - 890.3256208i,
        -262.24241923 - 217.3676714i,
        209.78552325 - 2028.80625314i,
        522.01685436 + 402.21705692i,
        782.92465649 - 661.69938268i,
        500.35890041 + 71.6283922i,
        -767.34833707 + 802.37855592i,
        924.71336895 - 122.21841272i,
        -669.3425839 - 305.84096425i,
        -317.55319733 - 96.68677478i,
        627.85267358 + 303.61513141i,
        464.77080783 - 225.37285511i,
        -162.39951478 + 1053.44841277i,
        -1187.41736421 + 1354.88443719i,
        923.65990537 + 172.87562937i,
        295.42110404 + 795.45956207i,
        486.47222639 + 371.84545749i,
        1172.57665456 + 441.20276775i,
        354.24516682 + 1313.10746877i,
        743.54324184 - 2141.69871639i,
        1016.78098834 + 1737.37053607i,
        -1732.66481779 - 170.76692851i,
        -132.87166543 - 1696.90746752i,
        -1370.673881 + 1103.68667862i,
        -1335.80194474 + 92.1964285i,
        -243.72275869 - 2382.00445007i,
        -1170.09136769 + 284.32600922i,
        -731.75300953 + 188.9271119i,
        383.60573171 - 87.2201872i,
        -1170. - 258.07557033i,
        -477.65702724 - 1436.6871366i,
        -177.62448205 - 477.25432967i,
        168.54894814 - 356.34589294i,
        1180.97608557 + 550.66725878i,
        -829.6574916 + 19.38576885i,
        -624.53904081 + 630.5649427i,
        -827.24696964 - 156.33425924i,
        341.94315724 - 1614.734511i,
        247.72112021 - 75.08866023i,
        -474. - 109.11920088i,
        666.50047432 - 1416.87106865i,
        -692.65711931 - 482.02550284i,
        -212.16160321 + 254.47746195i,
        48.73874755 - 122.36562931i,
        635.6574916 + 919.38576885i,
        44.73787649 + 652.35453835i,
        -395.78618679 - 340.82753745i,
        147.4247753 - 1636.55608233i,
        1179.0812442 + 536.4253485i,
        -788.04115968 + 691.88258068i,
        -137.69126643 + 1453.05119429i,
        1587.31285575 + 1284.44969813i,
        476.09590631 + 1821.51561011i,
        883.74241923 - 2149.20509618i,
        -808.92434087 + 591.43759254i,
        -1073.21336895 + 1550.28833112i,
        -1847.94504262 + 1421.98037841i,
        969.33606137 + 1716.63112659i,
        187.16846663 - 2159.87738931i,
        -357.71492176 - 373.4067187i,
        863.9780375 + 498.61322016i,
        -808.85890041 - 1523.72426096i,
        593.27674284 - 111.12517639i,
        -1185.84145293 - 390.72227289i,
        666.08768638 + 1447.77771922i,
        -3357.39828073 + 446.3671604i,
        -560.45154528 - 987.46380696i,
        1189.48314564 + 633.68185166i,
        1218.52731483 + 254.8272559i,
        892.30396795 - 703.80820754i,
        -902.28033748 + 640.8797481i,
        872.03144212 + 70.51121749i,
        -642.29578489 + 217.39203269i,
        -599.21504129 + 879.30620688i,
        442.47380891 + 1007.88415336i,
        293.81559598 + 1531.37730514i,
        571.42662565 - 315.61883137i,
        -1594.24222841 - 983.14421986i,
        411.09575945 + 68.4386678i,
        -1077.61978542 + 557.26983122i,
        -598.89534554 + 453.18004382i,
        134.39305342 + 212.2627129i,
        -690.36222713 - 447.62690833i,
        2132.61064487 - 112.80579738i,
        -329.38840432 - 1502.52698757i,
        1205.76619053 - 487.20214367i,
        -102.03857877 - 164.02882659i,
        783.13886282 + 327.42074507i,
        -91.00205557 - 163.07050783i,
        892.30396795 + 703.80820754i,
        -91.00205557 + 163.07050783i,
        783.13886282 - 327.42074507i,
        -102.03857877 + 164.02882659i,
        1205.76619053 + 487.20214367i,
        -329.38840432 + 1502.52698757i,
        2132.61064487 + 112.80579738i,
        -690.36222713 + 447.62690833i,
        134.39305342 - 212.2627129i,
        -598.89534554 - 453.18004382i,
        -1077.61978542 - 557.26983122i,
        411.09575945 - 68.4386678i,
        -1594.24222841 + 983.14421986i,
        571.42662565 + 315.61883137i,
        293.81559598 - 1531.37730514i,
        442.47380891 - 1007.88415336i,
        -599.21504129 - 879.30620688i,
        -642.29578489 - 217.39203269i,
        872.03144212 - 70.51121749i,
        -902.28033748 - 640.8797481i,
        -788.04115968 - 691.88258068i,
        1218.52731483 - 254.8272559i,
        1189.48314564 - 633.68185166i,
        -560.45154528 + 987.46380696i,
        -3357.39828073 - 446.3671604i,
        666.08768638 - 1447.77771922i,
        -1185.84145293 + 390.72227289i,
        593.27674284 + 111.12517639i,
        -808.85890041 + 1523.72426096i,
        863.9780375 - 498.61322016i,
        -357.71492176 + 373.4067187i,
        187.16846663 + 2159.87738931i,
        969.33606137 - 1716.63112659i,
        -1847.94504262 - 1421.98037841i,
        -1073.21336895 - 1550.28833112i,
        -808.92434087 - 591.43759254i,
        883.74241923 + 2149.20509618i,
        476.09590631 - 1821.51561011i,
        1587.31285575 - 1284.44969813i,
        -137.69126643 - 1453.05119429i,
        -1170. + 258.07557033i,
        1179.0812442 - 536.4253485i,
        147.4247753 + 1636.55608233i,
        -395.78618679 + 340.82753745i,
        44.73787649 - 652.35453835i,
        635.6574916 - 919.38576885i,
        48.73874755 + 122.36562931i,
        -212.16160321 - 254.47746195i,
        -692.65711931 + 482.02550284i,
        666.50047432 + 1416.87106865i,
        -474. + 109.11920088i,
        247.72112021 + 75.08866023i,
        341.94315724 + 1614.734511i,
        -827.24696964 + 156.33425924i,
        -624.53904081 - 630.5649427i,
        -829.6574916 - 19.38576885i,
        1180.97608557 - 550.66725878i,
        168.54894814 + 356.34589294i,
        -177.62448205 + 477.25432967i,
        -477.65702724 + 1436.6871366i,
        -317.55319733 + 96.68677478i,
        383.60573171 + 87.2201872i,
        -731.75300953 - 188.9271119i,
        -1170.09136769 - 284.32600922i,
        -243.72275869 + 2382.00445007i,
        -1335.80194474 - 92.1964285i,
        -1370.673881 - 1103.68667862i,
        -132.87166543 + 1696.90746752i,
        -1732.66481779 + 170.76692851i,
        1016.78098834 - 1737.37053607i,
        743.54324184 + 2141.69871639i,
        354.24516682 - 1313.10746877i,
        1172.57665456 - 441.20276775i,
        486.47222639 - 371.84545749i,
        295.42110404 - 795.45956207i,
        923.65990537 - 172.87562937i,
        -1187.41736421 - 1354.88443719i,
        -162.39951478 - 1053.44841277i,
        464.77080783 + 225.37285511i,
        627.85267358 - 303.61513141i,
        1064.54115968 + 566.9256958i,
        -669.3425839 + 305.84096425i,
        924.71336895 + 122.21841272i,
        -767.34833707 - 802.37855592i,
        500.35890041 - 71.6283922i,
        782.92465649 + 661.69938268i,
        522.01685436 - 402.21705692i,
        209.78552325 + 2028.80625314i,
        -262.24241923 + 217.3676714i,
        618.21356482 + 890.3256208i,
        1479.21492176 - 112.48854356i,
        774.96993475 - 444.79982225i,
        1068.89828073 - 273.51893558i,
        871.65255562 - 674.67391071i,
        544.18714425 + 1322.19333797i,
        169.911998 + 62.35925601i,
        -547.83606137 - 1444.17236687i,
        728.92770568 - 567.631721i,
        1212.34145293 - 20.67257772i,
        -224.81697692 + 392.88143542i,
        1176.63733835 - 814.225381i,
        -754.69918212 + 8.90948928i,
        3037.38928126 + 947.80031723i,
        486.26144416 - 1032.85740277i,
        -1250.69132214 - 428.04896363i,
        1181.58362156 + 87.82458481i,
        1299.38689611 - 36.20421311i,
        -1024.13125508 + 1220.44611858i,
        -670.52794177 - 733.43935201i,
        -251.90035859 + 56.52055868i,
        1249.16760944 + 1323.0142941i,
        978.94103302 + 752.34402307i,
        255.59641691 - 1251.11017711i,
        -1434.2110638 - 847.76862048i,
        -164.86725876 - 208.22427328i,
        -92.24494077 - 558.29862958i,
        -335.02523201 + 269.86187691i,
        -30.18278232 - 1656.63781286i,
        227.43188356 + 527.62046773i,
        -1090.83954659 + 743.93733065i,
        261.11189102 + 726.14630311i,
        -707.5102438 - 9.60648092i,
        -292.21914505 + 475.10791143i,
        568.46188065 - 268.48047211i,
        -13.94774744 - 228.90537236i,
        -476.26854518 - 359.46377983i,
        -36.94924812 - 340.33409977i,
        -368.13225237 - 567.78739701i,
        -378.33638126 + 488.78653793i,
        -1287.55954342 - 1032.21377246i,
        426.40893414 + 484.23328159i,
        -426.15136869 - 195.46475804i,
        1170.0899494 + 804.51542065i,
        1221.47374477 + 348.80076633i,
        -972.28944468 - 1033.95588672i,
        -20.01350084 - 517.25022364i,
        1787.36857019 + 378.97568199i,
        -240.33301813 + 274.44911895i,
        -411.24453146 + 911.13865763i,
        -1272.72978234 + 214.7926706i,
    };

    for (size_t i = 0; i < 25; i++)
        EXPECT_PRED2(almost_equal, coeffs_fft[i], expected[i]);
}
